//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.image` struct is generated, and contains static references to 14 images.
  struct image {
    /// Image `Popup_bg`.
    static let popup_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "Popup_bg")
    /// Image `Popup_icon`.
    static let popup_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Popup_icon")
    /// Image `mall_notice`.
    static let mall_notice = Rswift.ImageResource(bundle: R.hostingBundle, name: "mall_notice")
    /// Image `sk_shop_book`.
    static let sk_shop_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "sk_shop_book")
    /// Image `sk_shop_photo`.
    static let sk_shop_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "sk_shop_photo")
    /// Image `sk_store`.
    static let sk_store = Rswift.ImageResource(bundle: R.hostingBundle, name: "sk_store")
    /// Image `sy_spxq_fenx`.
    static let sy_spxq_fenx = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_spxq_fenx")
    /// Image `sy_spxq_guanz`.
    static let sy_spxq_guanz = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_spxq_guanz")
    /// Image `sy_spxq_icon2`.
    static let sy_spxq_icon2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_spxq_icon2")
    /// Image `sy_spxq_icon3`.
    static let sy_spxq_icon3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_spxq_icon3")
    /// Image `sy_spxq_jiantou2_white`.
    static let sy_spxq_jiantou2_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_spxq_jiantou2_white")
    /// Image `sy_spxq_jiantou2_yellow`.
    static let sy_spxq_jiantou2_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_spxq_jiantou2_yellow")
    /// Image `sy_spxq_navback`.
    static let sy_spxq_navback = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_spxq_navback")
    /// Image `sy_xpxq_dianp`.
    static let sy_xpxq_dianp = Rswift.ImageResource(bundle: R.hostingBundle, name: "sy_xpxq_dianp")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Popup_bg", bundle: ..., traitCollection: ...)`
    static func popup_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popup_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Popup_icon", bundle: ..., traitCollection: ...)`
    static func popup_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popup_icon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mall_notice", bundle: ..., traitCollection: ...)`
    static func mall_notice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mall_notice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sk_shop_book", bundle: ..., traitCollection: ...)`
    static func sk_shop_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sk_shop_book, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sk_shop_photo", bundle: ..., traitCollection: ...)`
    static func sk_shop_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sk_shop_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sk_store", bundle: ..., traitCollection: ...)`
    static func sk_store(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sk_store, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sy_spxq_fenx", bundle: ..., traitCollection: ...)`
    static func sy_spxq_fenx(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_spxq_fenx, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sy_spxq_guanz", bundle: ..., traitCollection: ...)`
    static func sy_spxq_guanz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_spxq_guanz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sy_spxq_icon2", bundle: ..., traitCollection: ...)`
    static func sy_spxq_icon2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_spxq_icon2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sy_spxq_icon3", bundle: ..., traitCollection: ...)`
    static func sy_spxq_icon3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_spxq_icon3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sy_spxq_jiantou2_white", bundle: ..., traitCollection: ...)`
    static func sy_spxq_jiantou2_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_spxq_jiantou2_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sy_spxq_jiantou2_yellow", bundle: ..., traitCollection: ...)`
    static func sy_spxq_jiantou2_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_spxq_jiantou2_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sy_spxq_navback", bundle: ..., traitCollection: ...)`
    static func sy_spxq_navback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_spxq_navback, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sy_xpxq_dianp", bundle: ..., traitCollection: ...)`
    static func sy_xpxq_dianp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sy_xpxq_dianp, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 15 nibs.
  struct nib {
    /// Nib `FirstTableViewCell`.
    static let firstTableViewCell = _R.nib._FirstTableViewCell()
    /// Nib `GoodsCategoryCell`.
    static let goodsCategoryCell = _R.nib._GoodsCategoryCell()
    /// Nib `LoginViewController`.
    static let loginViewController = _R.nib._LoginViewController()
    /// Nib `MainTabBarViewController`.
    static let mainTabBarViewController = _R.nib._MainTabBarViewController()
    /// Nib `SKApplyShopVC`.
    static let skApplyShopVC = _R.nib._SKApplyShopVC()
    /// Nib `SKCollectionCell`.
    static let skCollectionCell = _R.nib._SKCollectionCell()
    /// Nib `SKEnterShopView`.
    static let skEnterShopView = _R.nib._SKEnterShopView()
    /// Nib `SKGoodsCell`.
    static let skGoodsCell = _R.nib._SKGoodsCell()
    /// Nib `SKGoodsOneColumnCell`.
    static let skGoodsOneColumnCell = _R.nib._SKGoodsOneColumnCell()
    /// Nib `SKShopOwnInfoView`.
    static let skShopOwnInfoView = _R.nib._SKShopOwnInfoView()
    /// Nib `SystemNotificationVC`.
    static let systemNotificationVC = _R.nib._SystemNotificationVC()
    /// Nib `XEmptyCollectionCell`.
    static let xEmptyCollectionCell = _R.nib._XEmptyCollectionCell()
    /// Nib `YXGoodsCell`.
    static let yxGoodsCell = _R.nib._YXGoodsCell()
    /// Nib `YXGoodsFlowCell`.
    static let yxGoodsFlowCell = _R.nib._YXGoodsFlowCell()
    /// Nib `YXGoodsSectionSupplyView`.
    static let yxGoodsSectionSupplyView = _R.nib._YXGoodsSectionSupplyView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FirstTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.firstTableViewCell) instead")
    static func firstTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.firstTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GoodsCategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.goodsCategoryCell) instead")
    static func goodsCategoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.goodsCategoryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoginViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loginViewController) instead")
    static func loginViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loginViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MainTabBarViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mainTabBarViewController) instead")
    static func mainTabBarViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mainTabBarViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SKApplyShopVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.skApplyShopVC) instead")
    static func skApplyShopVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.skApplyShopVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SKCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.skCollectionCell) instead")
    static func skCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.skCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SKEnterShopView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.skEnterShopView) instead")
    static func skEnterShopView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.skEnterShopView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SKGoodsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.skGoodsCell) instead")
    static func skGoodsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.skGoodsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SKGoodsOneColumnCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.skGoodsOneColumnCell) instead")
    static func skGoodsOneColumnCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.skGoodsOneColumnCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SKShopOwnInfoView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.skShopOwnInfoView) instead")
    static func skShopOwnInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.skShopOwnInfoView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SystemNotificationVC", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.systemNotificationVC) instead")
    static func systemNotificationVC(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.systemNotificationVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "XEmptyCollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.xEmptyCollectionCell) instead")
    static func xEmptyCollectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xEmptyCollectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "YXGoodsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.yxGoodsCell) instead")
    static func yxGoodsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yxGoodsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "YXGoodsFlowCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.yxGoodsFlowCell) instead")
    static func yxGoodsFlowCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yxGoodsFlowCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "YXGoodsSectionSupplyView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.yxGoodsSectionSupplyView) instead")
    static func yxGoodsSectionSupplyView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.yxGoodsSectionSupplyView)
    }
    #endif

    static func firstTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FirstTableViewCell? {
      return R.nib.firstTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FirstTableViewCell
    }

    static func goodsCategoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GoodsCategoryCell? {
      return R.nib.goodsCategoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsCategoryCell
    }

    static func loginViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loginViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func mainTabBarViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.mainTabBarViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func skApplyShopVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.skApplyShopVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func skCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SKCollectionCell? {
      return R.nib.skCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SKCollectionCell
    }

    static func skEnterShopView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SKEnterShopView? {
      return R.nib.skEnterShopView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SKEnterShopView
    }

    static func skGoodsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SKGoodsCell? {
      return R.nib.skGoodsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SKGoodsCell
    }

    static func skGoodsOneColumnCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SKGoodsOneColumnCell? {
      return R.nib.skGoodsOneColumnCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SKGoodsOneColumnCell
    }

    static func skShopOwnInfoView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StoreKit.SKShopOwnInfoView? {
      return R.nib.skShopOwnInfoView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StoreKit.SKShopOwnInfoView
    }

    static func systemNotificationVC(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.systemNotificationVC.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func xEmptyCollectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> XEmptyCollectionCell? {
      return R.nib.xEmptyCollectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XEmptyCollectionCell
    }

    static func yxGoodsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> YXGoodsCell? {
      return R.nib.yxGoodsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YXGoodsCell
    }

    static func yxGoodsFlowCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> YXGoodsFlowCell? {
      return R.nib.yxGoodsFlowCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YXGoodsFlowCell
    }

    static func yxGoodsSectionSupplyView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> YXGoodsSectionSupplyView? {
      return R.nib.yxGoodsSectionSupplyView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YXGoodsSectionSupplyView
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _FirstTableViewCell.validate()
      try _GoodsCategoryCell.validate()
      try _SKApplyShopVC.validate()
      try _SKEnterShopView.validate()
      try _SystemNotificationVC.validate()
      try _YXGoodsSectionSupplyView.validate()
    }

    struct _FirstTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FirstTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FirstTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FirstTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "sy_spxq_jiantou2_yellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sy_spxq_jiantou2_yellow' is used in nib 'FirstTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GoodsCategoryCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "GoodsCategoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GoodsCategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GoodsCategoryCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '1' is used in nib 'GoodsCategoryCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LoginViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoginViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MainTabBarViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MainTabBarViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SKApplyShopVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SKApplyShopVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "sk_shop_book", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sk_shop_book' is used in nib 'SKApplyShopVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sk_shop_photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sk_shop_photo' is used in nib 'SKApplyShopVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SKCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SKCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SKCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SKCollectionCell
      }

      fileprivate init() {}
    }

    struct _SKEnterShopView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SKEnterShopView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SKEnterShopView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SKEnterShopView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "sk_store", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sk_store' is used in nib 'SKEnterShopView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SKGoodsCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SKGoodsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SKGoodsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SKGoodsCell
      }

      fileprivate init() {}
    }

    struct _SKGoodsOneColumnCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SKGoodsOneColumnCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SKGoodsOneColumnCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SKGoodsOneColumnCell
      }

      fileprivate init() {}
    }

    struct _SKShopOwnInfoView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SKShopOwnInfoView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StoreKit.SKShopOwnInfoView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StoreKit.SKShopOwnInfoView
      }

      fileprivate init() {}
    }

    struct _SystemNotificationVC: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SystemNotificationVC"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Popup_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Popup_bg' is used in nib 'SystemNotificationVC', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Popup_icon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Popup_icon' is used in nib 'SystemNotificationVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _XEmptyCollectionCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "XEmptyCollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> XEmptyCollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? XEmptyCollectionCell
      }

      fileprivate init() {}
    }

    struct _YXGoodsCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "YXGoodsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> YXGoodsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YXGoodsCell
      }

      fileprivate init() {}
    }

    struct _YXGoodsFlowCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "YXGoodsFlowCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> YXGoodsFlowCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YXGoodsFlowCell
      }

      fileprivate init() {}
    }

    struct _YXGoodsSectionSupplyView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "YXGoodsSectionSupplyView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> YXGoodsSectionSupplyView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? YXGoodsSectionSupplyView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "sy_spxq_jiantou2_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sy_spxq_jiantou2_white' is used in nib 'YXGoodsSectionSupplyView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
